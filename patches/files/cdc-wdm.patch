--- a/cdc-wdm.c	2012-03-28 14:35:17.870576268 +0200
+++ b/cdc-wdm.c	2012-04-02 14:21:44.404961441 +0200
@@ -11,6 +11,7 @@
  *
  * Many thanks to Carl Nordbeck
  */
+
 #include <linux/kernel.h>
 #include <linux/errno.h>
 #include <linux/slab.h>
@@ -28,12 +29,16 @@
 /*
  * Version Information
  */
-#define DRIVER_VERSION "v0.03"
+#define DRIVER_VERSION "v0.03-mbm"
 #define DRIVER_AUTHOR "Oliver Neukum"
 #define DRIVER_DESC "USB Abstract Control Model driver for USB WCM Device Management"
 
 #define HUAWEI_VENDOR_ID	0x12D1
 
+#ifndef PMSG_IS_AUTO
+#define PMSG_IS_AUTO(msg)       (((msg).event & PM_EVENT_AUTO) != 0)
+#endif
+
 static const struct usb_device_id wdm_ids[] = {
 	{
 		.match_flags = USB_DEVICE_ID_MATCH_INT_CLASS |
@@ -541,6 +546,9 @@ static unsigned int wdm_poll(struct file
 	unsigned int mask = 0;
 
 	spin_lock_irqsave(&desc->iuspin, flags);
+	/* MBM, fixes Select() */
+	poll_wait(file, &desc->wait, wait);
+
 	if (test_bit(WDM_DISCONNECTING, &desc->flags)) {
 		mask = POLLERR;
 		spin_unlock_irqrestore(&desc->iuspin, flags);
@@ -552,9 +560,8 @@ static unsigned int wdm_poll(struct file
 		mask |= POLLERR;
 	if (!test_bit(WDM_IN_USE, &desc->flags))
 		mask |= POLLOUT | POLLWRNORM;
-	spin_unlock_irqrestore(&desc->iuspin, flags);
 
-	poll_wait(file, &desc->wait, wait);
+	spin_unlock_irqrestore(&desc->iuspin, flags);
 
 desc_out:
 	return mask;
@@ -692,7 +699,7 @@ static int wdm_create(struct usb_interfa
 	if (!usb_endpoint_is_int_in(ep))
 		goto err;
 
-	desc->wMaxPacketSize = usb_endpoint_maxp(ep);
+	desc->wMaxPacketSize = le16_to_cpu(ep->wMaxPacketSize);
 
 	desc->orq = kmalloc(sizeof(struct usb_ctrlrequest), GFP_KERNEL);
 	if (!desc->orq)
@@ -1014,7 +1021,24 @@ static struct usb_driver wdm_driver = {
 	.supports_autosuspend = 1,
 };
 
-module_usb_driver(wdm_driver);
+/* --- low level module stuff --- */
+
+static int __init wdm_init(void)
+{
+	int rv;
+
+	rv = usb_register(&wdm_driver);
+
+	return rv;
+}
+
+static void __exit wdm_exit(void)
+{
+	usb_deregister(&wdm_driver);
+}
+
+module_init(wdm_init);
+module_exit(wdm_exit);
 
 MODULE_AUTHOR(DRIVER_AUTHOR);
 MODULE_DESCRIPTION(DRIVER_DESC);
