diff --git a/libmbm-gps/src/gpsctrl/atchannel.c b/libmbm-gps/src/gpsctrl/atchannel.c
index 8ea28cc..42135a2 100644
--- a/libmbm-gps/src/gpsctrl/atchannel.c
+++ b/libmbm-gps/src/gpsctrl/atchannel.c
@@ -652,7 +652,7 @@ static void *readerLoop(void *arg)
     set_at_context((struct atcontext *) arg);
     context = get_at_context();
 
-    MBMLOGV("Entering readerLoop()");
+    ALOGI("Entering readerLoop()");
 
     for (;;) {
         const char * line;
@@ -686,7 +686,7 @@ static void *readerLoop(void *arg)
     }
 
     onReaderClosed();
-    MBMLOGV("Exiting readerLoop()");
+    ALOGI("Exiting readerLoop()");
     return NULL;
 }
 
@@ -897,6 +897,7 @@ int at_reader_open(int fd, ATUnsolHandler h, int loglevel)
     pthread_attr_init (&attr);
     pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
 
+    ALOGI("pthread_create readerLoop");
     ret = pthread_create(&context->tid_reader, &attr, readerLoop, context);
 
     if (ret < 0) {
@@ -923,11 +924,11 @@ void at_reader_close(void)
     ENTER;
 
     if (context->fd >= 0) {
-        MBMLOGV("%s, closing fd=%d", __FUNCTION__, context->fd);
+        ALOGI("%s, closing at reader fd=%d", __FUNCTION__, context->fd);
         if (close(context->fd) != 0)
             MBMLOGE("%s, failed to close fd %d!", __FUNCTION__, context->fd);
     } else {
-        MBMLOGV("%s, fd already closed", __FUNCTION__);
+        ALOGW("%s, fd already closed", __FUNCTION__);
         EXIT;
         return;
     }
@@ -943,6 +944,7 @@ void at_reader_close(void)
     pthread_mutex_unlock(&context->commandmutex);
 
     /* Kick readerloop. */
+    ALOGI("kick readerLoop");
     write(context->readerCmdFds[1], "x", 1);
 
     EXIT;
diff --git a/libmbm-gps/src/gpsctrl/gps_ctrl.c b/libmbm-gps/src/gpsctrl/gps_ctrl.c
index dc4438c..50aa4be 100644
--- a/libmbm-gps/src/gpsctrl/gps_ctrl.c
+++ b/libmbm-gps/src/gpsctrl/gps_ctrl.c
@@ -140,6 +140,8 @@ static void *unsolicitedHandler(void *data)
 
     ENTER;
 
+    ALOGI("unsolictedhandler enter");
+
     queued_event *event = (queued_event *)data;
     if (NULL == event)
         MBMLOGE("%s: event = NULL", __FUNCTION__);
@@ -151,6 +153,8 @@ static void *unsolicitedHandler(void *data)
         free(event);
     }
 
+    ALOGI("unsolictedhandler exit");
+
     EXIT;
     return NULL;
 }
@@ -215,6 +219,7 @@ static void onUnsolicited(const char *s, const char *sms_pdu)
                 EXIT;
                 return;
             }
+  ALOGI("enqueue_event");
             enqueue_event(unsolicitedHandler, (void *)event);
         }
     }
@@ -259,6 +264,7 @@ void enqueue_event (gpsctrl_queued_event queued_event, void *data)
 
     pthread_t event_thread;
 
+ALOGI("pthread_create queued_event");
     ret = pthread_create(&event_thread, NULL, queued_event, data);
     if (ret < 0)
         MBMLOGE("%s error creating event thread", __FUNCTION__);
@@ -389,6 +395,7 @@ void gpsctrl_set_position_mode (int mode, int recurrence)
     } else
         context->interval = recurrence;
 
+    MBMLOGI("New GPS mode: %d Interval: %d", context->pref_mode, context->interval);
     EXIT;
 }
 
@@ -617,6 +624,7 @@ int gpsctrl_start(void)
     if (err < 0)
         return -1;
 
+    MBMLOGI("GPS Started in mode: %d", mode);
     return 0;
 }
 
@@ -660,9 +668,8 @@ int gpsctrl_stop(void)
 static void close_devices(void)
 {
 
-    at_reader_close();
-
     nmea_close();
+    at_reader_close();
 
 }
 
@@ -712,9 +719,10 @@ void gpsctrl_set_is_connected (int connected)
     ENTER;
 
     if (context->pref_mode == MODE_PGPS) {
-        if (gpsctrl_get_device_is_ready())
+        if (gpsctrl_get_device_is_ready()) {
+            MBMLOGI("Setting eedata state to: %d", connected);
             pgps_set_eedata(connected);
-        else
+        } else
             MBMLOGW("Not setting eedata since the device is not ready.");
     } else
         MBMLOGI("Not setting eedata since preferred mode is not PGPS");
diff --git a/libmbm-gps/src/gpsctrl/nmeachannel.c b/libmbm-gps/src/gpsctrl/nmeachannel.c
index 5d7ee92..38a7590 100644
--- a/libmbm-gps/src/gpsctrl/nmeachannel.c
+++ b/libmbm-gps/src/gpsctrl/nmeachannel.c
@@ -166,11 +166,11 @@ void nmea_close (void)
     ENTER;
 
     if (context->nmea_fd >= 0) {
-        MBMLOGV("%s, closing fd=%d", __FUNCTION__, context->nmea_fd);
+        ALOGI("%s, closing nmea fd=%d", __FUNCTION__, context->nmea_fd);
         if (close(context->nmea_fd) != 0)
             MBMLOGE("%s, failed to close fd %d!", __FUNCTION__, context->nmea_fd);
     } else {
-        MBMLOGV("%s, fd already closed", __FUNCTION__);
+        ALOGW("%s, fd already closed", __FUNCTION__);
         EXIT;
         return;
     }
diff --git a/libmbm-gps/src/mbm_gps.c b/libmbm-gps/src/mbm_gps.c
index 37fec6e..de881b0 100644
--- a/libmbm-gps/src/mbm_gps.c
+++ b/libmbm-gps/src/mbm_gps.c
@@ -482,13 +482,13 @@ mbm_agpsril_update_network_state(int connected, int type, int roaming,
 
     ENTER;
 
-    if ((old_conn != connected) || (old_roam != roaming) || (old_type != type)) {
+//    if ((old_conn != connected) || (old_roam != roaming) || (old_type != type)) {
         MBMLOGI("connected=%i type=%i roaming=%i, extra_info=%s",
             connected, type, roaming, extra_info);
-        old_conn = connected;
-        old_roam = roaming;
-        old_type = type;
-    }
+//        old_conn = connected;
+//        old_roam = roaming;
+//        old_type = type;
+//    }
 
     context->ril_connected = connected;
     context->ril_roaming = roaming;
@@ -788,9 +788,11 @@ int open_at_channel(void)
 
     ret = wait_for_emrdy(at_fd, TIMEOUT_EMRDY);
 
-    if (ret == CLEANUP_REQUESTED)
+    if (ret == CLEANUP_REQUESTED) {
+        if (ret == -1)
+            close(at_fd);
         return CLEANUP_REQUESTED;
-    else if (ret == -1) {
+    } else if (ret == -1) {
         close(at_fd);
         return -1;
     } else
@@ -812,8 +814,7 @@ static void main_loop(void *arg)
     int ret;
     int at_fd;
     int nmea_fd = -1;
-    int at_channel_lost;
-    int nmea_channel_lost;
+    int any_channel_lost;
     int i, at_dev, nmea_dev;
     struct stat sb;
     (void) arg;
@@ -832,8 +833,7 @@ static void main_loop(void *arg)
     }
 
     while (1) {
-        at_channel_lost = 0;
-        nmea_channel_lost = 0;
+        any_channel_lost = 0;
         at_fd = open_at_channel();
         if (at_fd == CLEANUP_REQUESTED)
             goto exit;
@@ -877,7 +877,7 @@ static void main_loop(void *arg)
         epoll_register(epoll_fd, cmd_fd);
         epoll_register(epoll_fd, nmea_fd);
 
-        while (!nmea_channel_lost) {
+        while (!any_channel_lost) {
             struct epoll_event event[2];
             int nevents;
             nevents = epoll_wait(epoll_fd, event, 2, -1);
@@ -894,7 +894,8 @@ static void main_loop(void *arg)
                     MBMLOGE("EPOLLERR or EPOLLHUP after epoll_wait(%x)!", event[i].events);
                     if (event[i].data.fd == nmea_fd) {
                         MBMLOGW("NMEA channel lost. Will try to recover.");
-                        nmea_channel_lost = 1;
+                        any_channel_lost = 1;
+                        continue;
                     }
                 }
 
@@ -927,8 +928,9 @@ static void main_loop(void *arg)
                                                         __FUNCTION__);
                             at_reader_close();
                             gpsctrl_set_device_is_ready(0);
-                            at_channel_lost = 1;
+                            any_channel_lost = 1;
                             MBMLOGW("AT channel lost. Will try to recover");
+                            continue;
                             break;
                         case CMD_QUIT:
                             goto exit;
@@ -945,14 +947,15 @@ static void main_loop(void *arg)
                     MBMLOGE("epoll_wait() returned unkown event %x", event[i].events);
             }
         }
-
+ALOGI("gpsctrl_set_device_is_ready0");
         gpsctrl_set_device_is_ready(0);
+ALOGI("epoll_deregister");
         epoll_deregister(epoll_fd, cmd_fd);
         epoll_deregister(epoll_fd, nmea_fd);
-
+ALOGI("gpsctrl_cleanup");
 retry:
         gpsctrl_cleanup();
-
+ALOGI("status_callback");
         if (context->gps_status.status != GPS_STATUS_ENGINE_OFF) {
             context->gps_status.status = GPS_STATUS_ENGINE_OFF;
             context->status_callback(&context->gps_status);
@@ -963,14 +966,14 @@ retry:
            devices is being removed from filesystem */
         i = TIMEOUT_DEVICE_REMOVED;
         do {
+            sleep(1);
             at_dev = (0 == stat(ctrlcontext->at_dev, &sb));
             nmea_dev = (0 == stat(ctrlcontext->nmea_dev, &sb));
             if (at_dev || nmea_dev) {
-                MBMLOGD("Waiting for %s%s%s to be removed (%d)...",
+                ALOGD("Waiting for %s%s%s to be removed (%d)...",
                     at_dev ? ctrlcontext->at_dev : "",
                     at_dev && nmea_dev ? " and ": "",
                     nmea_dev ? ctrlcontext->nmea_dev : "", i);
-                sleep(1);
                 i--;
             }
         } while ((at_dev || nmea_dev) && i);
@@ -1174,7 +1177,7 @@ static void mbm_gps_cleanup(void)
 
     context->gps_initiated = 0;
 
-    MBMLOGD("%s, waiting for main thread to exit", __FUNCTION__);
+ALOGI("%s, waiting for main thread to exit", __FUNCTION__);
     pthread_mutex_lock(&context->cleanup_mutex);
 
     add_pending_command(CMD_QUIT);
@@ -1182,10 +1185,10 @@ static void mbm_gps_cleanup(void)
 
     pthread_cond_wait(&context->cleanup_cond, &context->cleanup_mutex);
 
-    MBMLOGD("%s, stopping service handler", __FUNCTION__);
+ALOGI("%s, stopping service handler", __FUNCTION__);
     service_handler_stop();
 
-    MBMLOGD("%s, cleanup gps ctrl", __FUNCTION__);
+ALOGI("%s, cleanup gps ctrl", __FUNCTION__);
     gpsctrl_cleanup();
 
     pthread_mutex_unlock(&context->cleanup_mutex);
@@ -1248,6 +1251,8 @@ static int mbm_gps_stop(void)
         err = gpsctrl_stop();
         if (err < 0)
             MBMLOGE("Error stopping gps");
+        else
+            MBMLOGI("GPS Stoppped");
     }
 
     context->gps_started = 0;
@@ -1370,7 +1375,7 @@ mbm_gps_set_position_mode(GpsPositionMode mode,
     (void) preferred_time;
     (void) *get_mode_name;
 
-    MBMLOGV("%s:enter  %s min_interval = %d recurrence=%d pref_time=%d",
+    MBMLOGI("%s:enter  %s min_interval = %d recurrence=%d pref_time=%d",
          __FUNCTION__, get_mode_name(mode), min_interval, recurrence,
          preferred_time);
 
diff --git a/libmbm-gps/src/mbm_service_handler.c b/libmbm-gps/src/mbm_service_handler.c
index 9a11a16..f86c5d9 100644
--- a/libmbm-gps/src/mbm_service_handler.c
+++ b/libmbm-gps/src/mbm_service_handler.c
@@ -293,7 +293,8 @@ static void parse_message(char *msg)
             pgps_read_data(id, path);
         }
     } else {
-        MBMLOGD("%s, unknown message from mbm service received(%s)", __FUNCTION__, data);
+        MBMLOGD("%s, unknown message from mbm service received(%s)",
+                                             __FUNCTION__, msg);
     }
 
     free(data);
@@ -312,6 +313,8 @@ static void* socket_loop(void* arg)
 
     ENTER;
 
+ALOGI("socket_loop() enter");
+
     if ((ret = internal_init()) < 0) {
         MBMLOGE("Error initializing socket");
         EXIT;
@@ -368,6 +371,7 @@ int service_handler_init(int loglevel)
         return -1;
     }
 
+ALOGI("pthread_create socket_loop");
     ret = pthread_create(&socket_thread, NULL, socket_loop, NULL);
     if (ret < 0) {
         ALOGE("%s error creating socket thread", __FUNCTION__);
@@ -383,6 +387,8 @@ int service_handler_stop(void)
 
     ENTER;
 
+ALOGI("service_handler_stop sending QUIT");
+
     service_handler_send_message(CMD_SERVICE_QUIT, "");
     close(context->socket);
 
diff --git a/mbm-ril/net-utils.c b/mbm-ril/net-utils.c
index 9591568..a08e40c 100644
--- a/mbm-ril/net-utils.c
+++ b/mbm-ril/net-utils.c
@@ -35,6 +35,9 @@
 #include <utils/Log.h>
 #include <cutils/properties.h>
 
+#define PATH_PROC_NET_DEV               "/proc/net/dev"
+#define isspace(c) ((c) == ' ')
+
 static int ifc_ctl_sock = -1;
 
 static const char *ipaddr_to_string(in_addr_t addr)
@@ -156,3 +159,66 @@ int ifc_configure(const char *ifname,
 
     return 0;
 }
+
+static char *get_name(char *name, char *p)
+{
+	/* Extract <name> from nul-terminated p where p matches
+	 * <name>: after leading whitespace.
+	 * If match is not made, set name empty and return unchanged p
+	 */
+	char *nameend;
+	char *namestart;
+    char *s = p;
+
+	while (*s == ' ' || (unsigned char)(*s - 9) <= (13 - 9))
+		s++;
+
+	namestart = s;
+	nameend = namestart;
+	while (*nameend && *nameend != ':' && !isspace(*nameend))
+		nameend++;
+	if (*nameend == ':') {
+		if ((nameend - namestart) < IFNAMSIZ) {
+			memcpy(name, namestart, nameend - namestart);
+			name[nameend - namestart] = '\0';
+			p = nameend;
+		} else {
+			/* Interface name too large */
+			name[0] = '\0';
+		}
+	} else {
+		/* trailing ':' not found - return empty */
+		name[0] = '\0';
+	}
+	return p + 1;
+}
+
+int ifc_statistics(const char *ifname, unsigned long long *rx_packets
+                                     , unsigned long long *tx_packets )
+{
+	FILE *fh;
+	char buf[512];
+
+	fh = fopen(PATH_PROC_NET_DEV, "r");
+	if (!fh) {
+		return -1;
+	}
+
+	fgets(buf, sizeof buf, fh);
+	fgets(buf, sizeof buf, fh);
+
+	while (fgets(buf, sizeof buf, fh)) {
+		char *s, name[128];
+
+		s = get_name(name, buf);
+		if (ifname && !strcmp(ifname, name)) {
+		sscanf(s, "%*u%llu%*u%*u%*u%*u%*u%*u%*u%llu",
+			rx_packets,
+			tx_packets);
+			fclose(fh);
+			return 0;
+        }
+	}
+	fclose(fh);
+	return 1;
+}
diff --git a/mbm-ril/net-utils.h b/mbm-ril/net-utils.h
index 63d1664..13ddec5 100644
--- a/mbm-ril/net-utils.h
+++ b/mbm-ril/net-utils.h
@@ -27,5 +27,6 @@ int ifc_add_host_route(const char *name);
 int ifc_configure(const char *ifname,
         in_addr_t address,
         in_addr_t gateway);
-
+int ifc_statistics(const char *ifname, unsigned long long *rx_packets
+                                     , unsigned long long *tx_packets );
 #endif
diff --git a/mbm-ril/u300-ril-device.c b/mbm-ril/u300-ril-device.c
index 7e2af73..ed732ca 100644
--- a/mbm-ril/u300-ril-device.c
+++ b/mbm-ril/u300-ril-device.c
@@ -346,6 +346,7 @@ void onSIMReady(void *p)
 {
     int err = 0;
     int screenState;
+    char prop[PROPERTY_VALUE_MAX];
     (void) p;
 
     /* Check if ME is ready to set preferred message storage */
@@ -386,10 +387,16 @@ void onSIMReady(void *p)
     /* Subscribe to time zone/NITZ reporting.
      *
      */
-    err = at_send_command("AT*ETZR=3");
-    if (err != AT_NOERROR) {
-        ALOGD("%s() Degrading nitz to mode 2", __func__);
-        at_send_command("AT*ETZR=2");
+    property_get("mbm.ril.config.nitz", prop, "yes");
+    if (strstr(prop, "yes")) {
+        err = at_send_command("AT*ETZR=3");
+        if (err != AT_NOERROR) {
+            ALOGD("%s() Degrading nitz to mode 2", __func__);
+            at_send_command("AT*ETZR=2");
+        }
+    } else {
+        at_send_command("AT*ETZR=0");
+        ALOGW("%s() Network Time Zone (NITZ) disabled!", __func__);
     }
 
     /* Delete Internet Account Configuration.
diff --git a/mbm-ril/u300-ril-messaging.c b/mbm-ril/u300-ril-messaging.c
index 960846b..1e4e789 100644
--- a/mbm-ril/u300-ril-messaging.c
+++ b/mbm-ril/u300-ril-messaging.c
@@ -27,6 +27,7 @@
 #include "at_tok.h"
 #include "misc.h"
 #include "u300-ril.h"
+#include "u300-ril-device.h"
 
 #define LOG_TAG "RIL"
 #include <utils/Log.h>
@@ -855,6 +856,11 @@ void checkMessageStorageReady(void *p)
     struct timespec trigger_time;
     (void) p;
 
+    if (RADIO_STATE_SIM_READY != getRadioState()) {
+        ALOGE("%s() SIM not ready, aborting!", __func__);
+        return;
+    }
+
     err = at_send_command_singleline("AT+CPMS?","+CPMS: ", NULL);
     if (err == AT_NOERROR) {
         if (setPreferredMessageStorage() == 0) {
diff --git a/mbm-ril/u300-ril-network.c b/mbm-ril/u300-ril-network.c
index 3a82514..7d0af40 100644
--- a/mbm-ril/u300-ril-network.c
+++ b/mbm-ril/u300-ril-network.c
@@ -34,6 +34,8 @@
 #include "u300-ril-sim.h"
 #include "u300-ril-pdp.h"
 #include "u300-ril-device.h"
+#include <arpa/inet.h>
+#include "net-utils.h"
 
 #define LOG_TAG "RIL"
 #include <utils/Log.h>
@@ -52,6 +54,7 @@ static int s_cgreg_stat = 4, s_cgreg_lac = -1, s_cgreg_cid = -1, s_cgreg_act = -
 static int s_gsm_rinfo = 0, s_umts_rinfo = 0;
 static int s_reg_change = 0;
 static int s_cops_mode = -1;
+static int rssi_queue = 0;
 
 static void pollOperatorSelected(void *params);
 
@@ -139,6 +142,120 @@ enum ERINFO_umts {
 static int s_cs_status = E2REG_UNKNOWN;
 static int s_ps_status = E2REG_UNKNOWN;
 
+static const struct timespec NORMAL_FAST_DORMANCY_POLL = { 5, 0 };
+static const struct timespec SLOW_FAST_DORMANCY_POLL = { 10, 0 };
+
+static unsigned long long old_rx_packets;
+static unsigned long long old_tx_packets;
+
+static void pollFastDormancy(void *params);
+
+void startPollFastDormancy(void)
+{
+    int err;
+    err = ifc_statistics(ril_iface, &old_rx_packets, &old_tx_packets);
+    if (err == -1)
+        ALOGE("%s() Unable to read /proc/net/dev. FD disabled!", __func__);
+    else if (err == 1)
+        ALOGE("%s() Interface (%s) not found. FD disabled!", __func__, ril_iface);
+    else {
+        enqueueRILEventName(RIL_EVENT_QUEUE_NORMAL, pollFastDormancy, NULL,
+                                        &NORMAL_FAST_DORMANCY_POLL, NULL);
+        ALOGI("%s() Enabled Fast Dormancy!", __func__ );
+    }
+}
+
+/**
+ * Poll interface to see if we are able to enter
+ * Fast Dormancy.
+ */
+static void pollFastDormancy(void *params)
+{
+    (void) params;
+    int err;
+    unsigned long long rx_packets;
+    unsigned long long tx_packets;
+    static int dormant = 0;
+
+    /* First check that we still are connected*/
+    if (getE2napState() != E2NAP_STATE_CONNECTED) {
+        ALOGI("%s() Connection Lost. Disabled Fast Dormancy!", __func__ );
+        return;
+    }
+
+    /* Check that we are registered */
+    if ((s_cs_status != E2REG_REGISTERED) && (s_ps_status != E2REG_REGISTERED)) {
+        ALOGI("%s() Registration lost (Restricted). Slow Dormancy!", __func__ );
+        enqueueRILEventName(RIL_EVENT_QUEUE_NORMAL, pollFastDormancy, NULL,
+                                        &SLOW_FAST_DORMANCY_POLL, NULL);
+        return;
+    }
+
+    /* Check that we are registered */
+    if (!(s_creg_stat == CGREG_STAT_REG_HOME_NET ||
+        s_creg_stat == CGREG_STAT_ROAMING ||
+        s_cgreg_stat == CGREG_STAT_REG_HOME_NET ||
+        s_cgreg_stat == CGREG_STAT_ROAMING)) {
+        ALOGI("%s() Registration lost. Slow Dormancy!", __func__ );
+        enqueueRILEventName(RIL_EVENT_QUEUE_NORMAL, pollFastDormancy, NULL,
+                                        &SLOW_FAST_DORMANCY_POLL, NULL);
+        return;
+    }
+
+    /* Check that we are on UMTS */
+    if (!(s_umts_rinfo)) {
+        ALOGI("%s() 2G Network. Slow Dormancy!", __func__ );
+        enqueueRILEventName(RIL_EVENT_QUEUE_NORMAL, pollFastDormancy, NULL,
+                                        &SLOW_FAST_DORMANCY_POLL, NULL);
+        return;
+    }
+
+    err = ifc_statistics(ril_iface, &rx_packets, &tx_packets);
+    if (err == -1) {
+        ALOGE("%s() Unable to read /proc/net/dev. FD disabled!", __func__);
+        return;
+    } else if (err == 1) {
+        ALOGE("%s() Interface (%s) not found. FD disabled!", __func__, ril_iface);
+        return;
+    }
+
+    if ((old_rx_packets == rx_packets) && (old_rx_packets == rx_packets)) {
+        if (dormant == 0) {
+            ALOGI("%s() Data Dormant (RX:%llu TX: %llu) Enter Fast Dormancy!",
+                            __func__, rx_packets, tx_packets );
+            err = at_send_command("AT*EFDORM");
+            if (err != AT_NOERROR) {
+                ALOGW("%s() Failed Fast Dormancy. FD disabled!", __func__);
+                return;
+            } else {
+                dormant = 1;
+            }
+        }
+/* else {
+            ALOGI("%s() Data Still Dormant (RX:%llu TX: %llu) Fast Dormancy!",
+                            __func__, rx_packets, tx_packets );
+        }
+*/
+    } else {
+        if (dormant == 1) {
+            dormant = 0;
+            ALOGI("%s() Data transfer (RX:%llu TX: %llu) Exit Fast Dormancy!",
+                            __func__, rx_packets, tx_packets );
+        }
+/* else {
+            ALOGI("%s() Data transfer (RX:%llu TX: %llu)",
+                            __func__, rx_packets, tx_packets );
+        }
+*/
+        old_rx_packets = rx_packets;
+        old_tx_packets = tx_packets;
+    }
+
+    enqueueRILEventName(RIL_EVENT_QUEUE_NORMAL, pollFastDormancy, NULL,
+                                    &NORMAL_FAST_DORMANCY_POLL, NULL);
+
+}
+
 /**
  * Poll +COPS? and return a success, or if the loop counter reaches
  * REPOLL_OPERATOR_SELECTED, return generic failure.
@@ -690,6 +807,8 @@ void pollSignalStrength(void *arg)
     RIL_SignalStrength_v6 signalStrength;
     (void) arg;
 
+    rssi_queue = 0;
+
     if (getSignalStrength(&signalStrength) < 0)
         ALOGE("%s() Polling the signal strength failed", __func__);
     else
@@ -700,7 +819,11 @@ void pollSignalStrength(void *arg)
 void onSignalStrengthChanged(const char *s)
 {
     (void) s;
-    enqueueRILEvent(RIL_EVENT_QUEUE_PRIO, pollSignalStrength, NULL, NULL);
+
+    if (rssi_queue == 0) {
+        rssi_queue++;
+        enqueueRILEvent(RIL_EVENT_QUEUE_PRIO, pollSignalStrength, NULL, NULL);
+    }
 }
 
 void onRegistrationStatusChanged(const char *s)
diff --git a/mbm-ril/u300-ril-network.h b/mbm-ril/u300-ril-network.h
index 58ba80a..63719db 100644
--- a/mbm-ril/u300-ril-network.h
+++ b/mbm-ril/u300-ril-network.h
@@ -55,4 +55,6 @@ void Get_GSM_NCIs(RIL_Token t);
 void Get_WCDMA_NCIs(RIL_Token t);
 void No_NCIs(RIL_Token t);
 
+void startPollFastDormancy(void);
+
 #endif
diff --git a/mbm-ril/u300-ril-pdp.c b/mbm-ril/u300-ril-pdp.c
index fb23ecc..036e8af 100644
--- a/mbm-ril/u300-ril-pdp.c
+++ b/mbm-ril/u300-ril-pdp.c
@@ -37,6 +37,7 @@
 #include <cutils/properties.h>
 #include "u300-ril-error.h"
 #include "u300-ril-pdp.h"
+#include "u300-ril-network.h"
 
 #define LOG_TAG "RIL"
 #include <utils/Log.h>
@@ -738,6 +739,8 @@ down:
     free(gateways);
     free(dnses);
 
+    startPollFastDormancy();
+
     return;
 
 error:
diff --git a/mbm-ril/u300-ril.c b/mbm-ril/u300-ril.c
index 5777280..4ed04c6 100644
--- a/mbm-ril/u300-ril.c
+++ b/mbm-ril/u300-ril.c
@@ -310,8 +310,9 @@ static void requestScreenState(void *data, size_t datalen, RIL_Token t)
     if (datalen < sizeof(int *))
         goto error;
 
-    /* No point of enabling unsolicited if radio is off */
-    if (RADIO_STATE_OFF == getRadioState())
+    /* No point of enabling unsolicited if radio is off
+       or SIM is locked */
+    if (RADIO_STATE_SIM_READY != getRadioState())
         goto success;
 
     s_screenState = ((int *) data)[0];
@@ -1215,6 +1216,7 @@ static void *queueRunner(void *param)
            device is being removed from filesystem */
 
         int i = TIMEOUT_DEVICE_REMOVED;
+        sleep(1);
         while((i--) && (stat(queueArgs->device_path, &sb) == 0)) {
             ALOGD("%s() Waiting for %s to be removed (%d)...", __func__,
                 queueArgs->device_path, i);
